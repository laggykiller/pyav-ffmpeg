name: build-ffmpeg
# on: [push, pull_request]
on:
  push:
    tags:
      - '*'

jobs:
  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        token: "${{ secrets.GITHUB_TOKEN }}"
        name: ${{ github.ref_name }}

  build:
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: macos-latest
          #   arch: arm64
          #   shell: bash
          #   cibw_build: cp38-*
          #   python_version: 3.8
          #   msys2_sys: na
          #   msys2_env: na
          # - os: macos-latest
          #   arch: x86_64
          #   shell: bash
          #   cibw_build: cp38-*
          #   python_version: 3.8
          #   msys2_sys: na
          #   msys2_env: na
          # - os: ubuntu-latest
          #   arch: i686
          #   shell: bash
          #   cibw_build: cp38-*
          #   python_version: 3.8
          #   msys2_sys: na
          #   msys2_env: na
          # - os: ubuntu-latest
          #   arch: x86_64
          #   shell: bash
          #   cibw_build: cp38-*
          #   python_version: 3.8
          #   msys2_sys: na
          #   msys2_env: na
          # - os: windows-latest
          #   arch: AMD64
          #   shell: 'msys2 {0}'
          #   cibw_build: cp38-*
          #   python_version: 3.8
          #   msys2_sys: mingw64
          #   msys2_env: x86_64
          # - os: windows-latest
          #   arch: x86
          #   shell: 'msys2 {0}'
          #   cibw_build: cp38-*
          #   python_version: 3.8
          #   msys2_sys: mingw32
          #   msys2_env: i686
          - os: windows-latest
            arch: ARM64
            shell: 'msys2 {0}'
            cibw_build: cp39-*
            python_version: 3.9
            msys2_sys: mingw64
            msys2_env: x86_64
    defaults:
      run:
        shell: ${{ matrix.shell }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - name: Install packages
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install pkg-config
          brew unlink gettext libidn2 libpng libtiff libunistring little-cms2 unbound
      - uses: msys2/setup-msys2@v2
        if: matrix.os == 'windows-latest'
        with:
          msystem: ${{matrix.msys2_sys}}
          install: >
            base-devel
            mingw-w64-${{matrix.msys2_env}}-gcc
            mingw-w64-${{matrix.msys2_env}}-gperf
            mingw-w64-${{matrix.msys2_env}}-nasm
          path-type: inherit
      - name: Build FFmpeg (vcpkg)
        if: matrix.os == 'windows-latest' && matrix.arch == 'ARM64'
        shell: cmd
        run: |
          C:\vcpkg\vcpkg.exe install ffmpeg[all,ffmpeg,ffplay,ffprobe]:arm64-windows-static-crt-release --overlay-triplets=custom-triplets
          mkdir "C:\cibw"
          move "C:\vcpkg\installed\arm64-windows-static-crt-release" "C:\cibw\vendor"
      - name: Build FFmpeg
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BEFORE_BUILD: python scripts/build-ffmpeg.py /tmp/vendor
          CIBW_BEFORE_BUILD_WINDOWS: python scripts\build-ffmpeg.py C:\cibw\vendor
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: LD_LIBRARY_PATH=/tmp/vendor/lib:$LD_LIBRARY_PATH auditwheel repair -w {dest_dir} {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair --add-path C:\cibw\vendor\bin -w {dest_dir} {wheel}
          CIBW_SKIP: "*musllinux*"
          CIBW_TEST_COMMAND: python -c "import dummy"
        run: |
          pip install cibuildwheel delvewheel
          cibuildwheel --output-dir output
          rm -f output/*.whl
      - name: Upload FFmpeg
        uses: actions/upload-artifact@v3
        with:
          name: output
          path: output/
      - name: Upload Release Asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: output/*

  build-qemu-stage-1:
    needs: createrelease
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64, ppc64le]
    env:
      stage: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Build FFmpeg dependencies
        run: |
          docker run -v $PWD:/project:rw --workdir=/project quay.io/pypa/manylinux2014_${{ matrix.arch }} bash -exc '
            export PATH=/opt/python/cp38-cp38/bin:$PATH;
            export CIBUILDWHEEL=1;
            python scripts/build-ffmpeg.py /tmp/vendor --stage ${{ env.stage }};
            cp -ar /tmp/vendor /project;
          '
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ matrix.arch }}
          path: vendor

  build-qemu-stage-2:
    needs: build-qemu-stage-1
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64, ppc64le]
    env:
      stage: 2
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - uses: actions/download-artifact@v3
        with:
          name: artifacts-${{ matrix.arch }}
          path: vendor
      - name: Build FFmpeg dependencies
        run: |
          docker run -v $PWD:/project:rw --workdir=/project quay.io/pypa/manylinux2014_${{ matrix.arch }} bash -exc '
            export PATH=/opt/python/cp38-cp38/bin:$PATH;
            export CIBUILDWHEEL=1;
            cp -ar vendor /tmp;
            python scripts/build-ffmpeg.py /tmp/vendor --stage ${{ env.stage }};
            cp -ar /tmp/vendor /project;
          '
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ matrix.arch }}
          path: vendor

  build-qemu-stage-3:
    needs: build-qemu-stage-2
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64, ppc64le]
    env:
      stage: 3
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - uses: actions/download-artifact@v3
        with:
          name: artifacts-${{ matrix.arch }}
          path: vendor
      - name: Build FFmpeg
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BEFORE_ALL_LINUX: cp -ar vendor /tmp
          CIBW_BEFORE_BUILD: python scripts/build-ffmpeg.py /tmp/vendor --stage ${{ env.stage }}
          CIBW_BUILD: cp38-*
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: LD_LIBRARY_PATH=/tmp/vendor/lib:$LD_LIBRARY_PATH auditwheel repair -w {dest_dir} {wheel}
          CIBW_SKIP: "*musllinux*"
          CIBW_TEST_COMMAND: python -c "import dummy"
        run: |
          pip install cibuildwheel
          cibuildwheel --output-dir output
          rm -f output/*.whl
        shell: bash
      - name: Upload FFmpeg
        uses: actions/upload-artifact@v3
        with:
          name: output
          path: output/
      - name: Upload Release Asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: output/*