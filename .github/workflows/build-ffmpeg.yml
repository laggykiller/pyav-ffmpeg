name: build-ffmpeg
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: arm64
            shell: bash
            cibw_build: cp38-*
            python_version: 3.8
          - os: macos-latest
            arch: x86_64
            shell: bash
            cibw_build: cp38-*
            python_version: 3.8
          - os: ubuntu-latest
            arch: i686
            shell: bash
            cibw_build: cp38-*
            python_version: 3.8
          - os: ubuntu-latest
            arch: x86_64
            shell: bash
            cibw_build: cp38-*
            python_version: 3.8
          - os: windows-latest
            arch: AMD64
            shell: 'msys2 {0}'
            cibw_build: cp38-*
            python_version: 3.8
          - os: windows-latest
            arch: ARM64
            shell: 'msys2 {0}'
            cibw_build: cp39-*
            python_version: 3.9
    defaults:
      run:
        shell: ${{ matrix.shell }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - name: Install packages
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install pkg-config
          brew unlink gettext libidn2 libpng libtiff libunistring little-cms2 unbound
      - uses: msys2/setup-msys2@v2
        if: matrix.os == 'windows-latest'
        with:
          install: base-devel mingw-w64-x86_64-gcc mingw-w64-x86_64-gperf mingw-w64-x86_64-nasm
          path-type: inherit
      - name: Setup msys2 for arm64
        if: matrix.os == 'windows-latest' && matrix.arch == 'ARM64'
        run: |
          echo '[woarm64]' >> /etc/pacman.conf
          echo 'Server = https://windows-on-arm-experiments.github.io/msys2-woarm64-build/$arch' >> /etc/pacman.conf
          echo 'SigLevel = Optional' >> /etc/pacman.conf
          pacman -Sy
          pacman --noconfirm -S \
            woarm64/mingw-w64-cross-binutils \
            woarm64/mingw-w64-cross-crt \
            woarm64/mingw-w64-cross-gcc \
            woarm64/mingw-w64-cross-headers \
            woarm64/mingw-w64-cross-windows-default-manifest \
            woarm64/mingw-w64-cross-winpthreads
          
          # Install packages for those that failed to compile
          pacman --noconfirm -Sw \
            mingw-w64-clang-aarch64-libxml2 \
            mingw-w64-clang-aarch64-libiconv \
            mingw-w64-clang-aarch64-fontconfig \
            mingw-w64-clang-aarch64-fribidi \
            mingw-w64-clang-aarch64-harfbuzz \
            mingw-w64-clang-aarch64-glib2 \
            mingw-w64-clang-aarch64-graphite2 \
            mingw-w64-clang-aarch64-pcre2 \
            mingw-w64-clang-aarch64-libbluray \
            mingw-w64-clang-aarch64-dav1d \
            mingw-w64-clang-aarch64-libvpx \
            mingw-w64-clang-aarch64-x265
          
          # Install packages for those that could be compiled successfully
          pacman --noconfirm -Sw \
            mingw-w64-clang-aarch64-xz \
            mingw-w64-clang-aarch64-zlib \
            mingw-w64-clang-aarch64-bzip2 \
            mingw-w64-clang-aarch64-gmp \
            mingw-w64-clang-aarch64-libpng \
            mingw-w64-clang-aarch64-libxml2 \
            mingw-w64-clang-aarch64-freetype \
            mingw-w64-clang-aarch64-aom \
            mingw-w64-clang-aarch64-libass \
            mingw-w64-clang-aarch64-lame \
            mingw-w64-clang-aarch64-libogg \
            mingw-w64-clang-aarch64-opencore-amr \
            mingw-w64-clang-aarch64-openjpeg2 \
            mingw-w64-clang-aarch64-opus \
            mingw-w64-clang-aarch64-speex \
            mingw-w64-clang-aarch64-twolame \
            mingw-w64-clang-aarch64-libvorbis \
            mingw-w64-clang-aarch64-x264 \
            mingw-w64-clang-aarch64-xvidcore
          
          mkdir -p /c/cibw

          for file in /var/cache/pacman/pkg/mingw-w64-clang-aarch64-*.pkg.tar.zst; do tar -xf "$file" -C /c/cibw/; done

          mv /c/cibw/clangarm64 /c/cibw/vendor
          mkdir -p /c/cibw/vendor/var/lib/cibuildpkg
          
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/xml2
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/iconv
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/fontconfig
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/fribidi
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/harfbuzz
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/glib
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/graphite
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/pcre
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/bluray
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/dav1d
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/vpx
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/x265

          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/xz
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/zlib
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/bz2
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/gmp
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/png
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/freetype
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/aom
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/ass
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/lame
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/ogg
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/opencore-amr
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/openjpeg
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/opus
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/twolame
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/vorbis
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/vpx
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/x264
          echo installed > /c/cibw/vendor/var/lib/cibuildpkg/xvid
      - name: Build FFmpeg
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BEFORE_BUILD: python scripts/build-ffmpeg.py /tmp/vendor
          CIBW_BEFORE_BUILD_WINDOWS: python scripts\build-ffmpeg.py C:\cibw\vendor
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: LD_LIBRARY_PATH=/tmp/vendor/lib:$LD_LIBRARY_PATH auditwheel repair -w {dest_dir} {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair --add-path C:\cibw\vendor\bin -w {dest_dir} {wheel}
          CIBW_SKIP: "*musllinux*"
          CIBW_TEST_COMMAND: python -c "import dummy"
        run: |
          pip install cibuildwheel delvewheel
          cibuildwheel --output-dir output
          rm -f output/*.whl
      - name: Upload FFmpeg
        uses: actions/upload-artifact@v3
        with:
          name: output
          path: output/

  build-qemu-stage-1:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64, ppc64le]
    env:
      stage: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Build FFmpeg dependencies
        run: |
          docker run -v $PWD:/project:rw --workdir=/project quay.io/pypa/manylinux2014_${{ matrix.arch }} bash -exc '
            export PATH=/opt/python/cp38-cp38/bin:$PATH;
            export CIBUILDWHEEL=1;
            python scripts/build-ffmpeg.py /tmp/vendor --stage ${{ env.stage }};
            cp -ar /tmp/vendor /project;
          '
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ matrix.arch }}
          path: vendor

  build-qemu-stage-2:
    needs: build-qemu-stage-1
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64, ppc64le]
    env:
      stage: 2
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - uses: actions/download-artifact@v3
        with:
          name: artifacts-${{ matrix.arch }}
          path: vendor
      - name: Build FFmpeg dependencies
        run: |
          docker run -v $PWD:/project:rw --workdir=/project quay.io/pypa/manylinux2014_${{ matrix.arch }} bash -exc '
            export PATH=/opt/python/cp38-cp38/bin:$PATH;
            export CIBUILDWHEEL=1;
            cp -ar vendor /tmp;
            python scripts/build-ffmpeg.py /tmp/vendor --stage ${{ env.stage }};
            cp -ar /tmp/vendor /project;
          '
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ matrix.arch }}
          path: vendor

  build-qemu-stage-3:
    needs: build-qemu-stage-2
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64, ppc64le]
    env:
      stage: 3
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - uses: actions/download-artifact@v3
        with:
          name: artifacts-${{ matrix.arch }}
          path: vendor
      - name: Build FFmpeg
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BEFORE_ALL_LINUX: cp -ar vendor /tmp
          CIBW_BEFORE_BUILD: python scripts/build-ffmpeg.py /tmp/vendor --stage ${{ env.stage }}
          CIBW_BUILD: cp38-*
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: LD_LIBRARY_PATH=/tmp/vendor/lib:$LD_LIBRARY_PATH auditwheel repair -w {dest_dir} {wheel}
          CIBW_SKIP: "*musllinux*"
          CIBW_TEST_COMMAND: python -c "import dummy"
        run: |
          pip install cibuildwheel
          cibuildwheel --output-dir output
          rm -f output/*.whl
        shell: bash
      - name: Upload FFmpeg
        uses: actions/upload-artifact@v3
        with:
          name: output
          path: output/
